// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    Mux16(a=rAout, b=inM, sel=instruction[12], out=y);
    ALU(
        x=rDout, 
        y=y, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=comp, 
        out=outM,
        zr=zr, 
        ng=ng
    );
    And(a=instruction[15], b=instruction[5], out=partwriteA);
    Not(in=instruction[15], out=notCins);
    Or(a=partwriteA, b=notCins, out=writeA);
    Mux16(a=instruction, b=comp, sel=instruction[15], out=rAin);
    ARegister(in=rAin, load=writeA, out=rAout, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=comp, load=writeD, out=rDout);

    And(a=instruction[15], b=instruction[3], out=writeM); // Write to memory if dest is M and is a C instruction
    
    Not(in=ng, out=notng);
    And(a=ng,b=instruction[2],out=lt);
    And(a=zr, b=instruction[1], out=eq);
    Not(in=zr, out=notzr);
    And(a=notng, b=instruction[0], out=pos);
    And(a=notzr, b=pos, out=gt);
    Or(a=lt, b=eq, out=lteq);
    Or(a=lteq,b=gt,out=jump);
    And(a=jump,b=instruction[15],out=cjump);
    // Not(in=cjump, out=notcjump);

    PC(in=rAout, load=cjump, inc=true, reset=reset, out[0..14]=pc);


    
    // a is instruction[12]
    

}
